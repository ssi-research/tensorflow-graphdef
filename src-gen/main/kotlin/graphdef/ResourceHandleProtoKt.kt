//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: graphdef/resource_handle.proto

package graphdef;

@kotlin.jvm.JvmName("-initializeresourceHandleProto")
public inline fun resourceHandleProto(block: graphdef.ResourceHandleProtoKt.Dsl.() -> kotlin.Unit): graphdef.ResourceHandleProto =
  graphdef.ResourceHandleProtoKt.Dsl._create(graphdef.ResourceHandleProto.newBuilder()).apply { block() }._build()
public object ResourceHandleProtoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: graphdef.ResourceHandleProto.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: graphdef.ResourceHandleProto.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): graphdef.ResourceHandleProto = _builder.build()

    /**
     * <pre>
     * Unique name for the device containing the resource.
     * </pre>
     *
     * <code>string device = 1;</code>
     */
    public var device: kotlin.String
      @JvmName("getDevice")
      get() = _builder.getDevice()
      @JvmName("setDevice")
      set(value) {
        _builder.setDevice(value)
      }
    /**
     * <pre>
     * Unique name for the device containing the resource.
     * </pre>
     *
     * <code>string device = 1;</code>
     */
    public fun clearDevice() {
      _builder.clearDevice()
    }

    /**
     * <pre>
     * Container in which this resource is placed.
     * </pre>
     *
     * <code>string container = 2;</code>
     */
    public var container: kotlin.String
      @JvmName("getContainer")
      get() = _builder.getContainer()
      @JvmName("setContainer")
      set(value) {
        _builder.setContainer(value)
      }
    /**
     * <pre>
     * Container in which this resource is placed.
     * </pre>
     *
     * <code>string container = 2;</code>
     */
    public fun clearContainer() {
      _builder.clearContainer()
    }

    /**
     * <pre>
     * Unique name of this resource.
     * </pre>
     *
     * <code>string name = 3;</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * Unique name of this resource.
     * </pre>
     *
     * <code>string name = 3;</code>
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * <pre>
     * Hash code for the type of the resource. Is only valid in the same device
     * and in the same execution.
     * </pre>
     *
     * <code>uint64 hash_code = 4;</code>
     */
    public var hashCode: kotlin.Long
      @JvmName("getHashCode")
      get() = _builder.getHashCode()
      @JvmName("setHashCode")
      set(value) {
        _builder.setHashCode(value)
      }
    /**
     * <pre>
     * Hash code for the type of the resource. Is only valid in the same device
     * and in the same execution.
     * </pre>
     *
     * <code>uint64 hash_code = 4;</code>
     */
    public fun clearHashCode() {
      _builder.clearHashCode()
    }

    /**
     * <pre>
     * For debug-only, the name of the type pointed to by this handle, if
     * available.
     * </pre>
     *
     * <code>string maybe_type_name = 5;</code>
     */
    public var maybeTypeName: kotlin.String
      @JvmName("getMaybeTypeName")
      get() = _builder.getMaybeTypeName()
      @JvmName("setMaybeTypeName")
      set(value) {
        _builder.setMaybeTypeName(value)
      }
    /**
     * <pre>
     * For debug-only, the name of the type pointed to by this handle, if
     * available.
     * </pre>
     *
     * <code>string maybe_type_name = 5;</code>
     */
    public fun clearMaybeTypeName() {
      _builder.clearMaybeTypeName()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class DtypesAndShapesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Data types and shapes for the underlying resource.
     * </pre>
     *
     * <code>repeated .uni_model_proto.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
     */
     public val dtypesAndShapes: com.google.protobuf.kotlin.DslList<graphdef.ResourceHandleProto.DtypeAndShape, DtypesAndShapesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getDtypesAndShapesList()
      )
    /**
     * <pre>
     * Data types and shapes for the underlying resource.
     * </pre>
     *
     * <code>repeated .uni_model_proto.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
     * @param value The dtypesAndShapes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addDtypesAndShapes")
    public fun com.google.protobuf.kotlin.DslList<graphdef.ResourceHandleProto.DtypeAndShape, DtypesAndShapesProxy>.add(value: graphdef.ResourceHandleProto.DtypeAndShape) {
      _builder.addDtypesAndShapes(value)
    }
    /**
     * <pre>
     * Data types and shapes for the underlying resource.
     * </pre>
     *
     * <code>repeated .uni_model_proto.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
     * @param value The dtypesAndShapes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignDtypesAndShapes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<graphdef.ResourceHandleProto.DtypeAndShape, DtypesAndShapesProxy>.plusAssign(value: graphdef.ResourceHandleProto.DtypeAndShape) {
      add(value)
    }
    /**
     * <pre>
     * Data types and shapes for the underlying resource.
     * </pre>
     *
     * <code>repeated .uni_model_proto.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
     * @param values The dtypesAndShapes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllDtypesAndShapes")
    public fun com.google.protobuf.kotlin.DslList<graphdef.ResourceHandleProto.DtypeAndShape, DtypesAndShapesProxy>.addAll(values: kotlin.collections.Iterable<graphdef.ResourceHandleProto.DtypeAndShape>) {
      _builder.addAllDtypesAndShapes(values)
    }
    /**
     * <pre>
     * Data types and shapes for the underlying resource.
     * </pre>
     *
     * <code>repeated .uni_model_proto.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
     * @param values The dtypesAndShapes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllDtypesAndShapes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<graphdef.ResourceHandleProto.DtypeAndShape, DtypesAndShapesProxy>.plusAssign(values: kotlin.collections.Iterable<graphdef.ResourceHandleProto.DtypeAndShape>) {
      addAll(values)
    }
    /**
     * <pre>
     * Data types and shapes for the underlying resource.
     * </pre>
     *
     * <code>repeated .uni_model_proto.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
     * @param index The index to set the value at.
     * @param value The dtypesAndShapes to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setDtypesAndShapes")
    public operator fun com.google.protobuf.kotlin.DslList<graphdef.ResourceHandleProto.DtypeAndShape, DtypesAndShapesProxy>.set(index: kotlin.Int, value: graphdef.ResourceHandleProto.DtypeAndShape) {
      _builder.setDtypesAndShapes(index, value)
    }
    /**
     * <pre>
     * Data types and shapes for the underlying resource.
     * </pre>
     *
     * <code>repeated .uni_model_proto.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearDtypesAndShapes")
    public fun com.google.protobuf.kotlin.DslList<graphdef.ResourceHandleProto.DtypeAndShape, DtypesAndShapesProxy>.clear() {
      _builder.clearDtypesAndShapes()
    }

  }
  @kotlin.jvm.JvmName("-initializedtypeAndShape")
  public inline fun dtypeAndShape(block: graphdef.ResourceHandleProtoKt.DtypeAndShapeKt.Dsl.() -> kotlin.Unit): graphdef.ResourceHandleProto.DtypeAndShape =
    graphdef.ResourceHandleProtoKt.DtypeAndShapeKt.Dsl._create(graphdef.ResourceHandleProto.DtypeAndShape.newBuilder()).apply { block() }._build()
  public object DtypeAndShapeKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: graphdef.ResourceHandleProto.DtypeAndShape.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: graphdef.ResourceHandleProto.DtypeAndShape.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): graphdef.ResourceHandleProto.DtypeAndShape = _builder.build()

      /**
       * <code>.uni_model_proto.DataType dtype = 1;</code>
       */
      public var dtype: graphdef.DataType
        @JvmName("getDtype")
        get() = _builder.getDtype()
        @JvmName("setDtype")
        set(value) {
          _builder.setDtype(value)
        }
      /**
       * <code>.uni_model_proto.DataType dtype = 1;</code>
       */
      public fun clearDtype() {
        _builder.clearDtype()
      }

      /**
       * <code>.uni_model_proto.TensorShapeProto shape = 2;</code>
       */
      public var shape: graphdef.TensorShapeProto
        @JvmName("getShape")
        get() = _builder.getShape()
        @JvmName("setShape")
        set(value) {
          _builder.setShape(value)
        }
      /**
       * <code>.uni_model_proto.TensorShapeProto shape = 2;</code>
       */
      public fun clearShape() {
        _builder.clearShape()
      }
      /**
       * <code>.uni_model_proto.TensorShapeProto shape = 2;</code>
       * @return Whether the shape field is set.
       */
      public fun hasShape(): kotlin.Boolean {
        return _builder.hasShape()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun graphdef.ResourceHandleProto.copy(block: graphdef.ResourceHandleProtoKt.Dsl.() -> kotlin.Unit): graphdef.ResourceHandleProto =
  graphdef.ResourceHandleProtoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun graphdef.ResourceHandleProto.DtypeAndShape.copy(block: graphdef.ResourceHandleProtoKt.DtypeAndShapeKt.Dsl.() -> kotlin.Unit): graphdef.ResourceHandleProto.DtypeAndShape =
  graphdef.ResourceHandleProtoKt.DtypeAndShapeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val graphdef.ResourceHandleProto.DtypeAndShapeOrBuilder.shapeOrNull: graphdef.TensorShapeProto?
  get() = if (hasShape()) getShape() else null

