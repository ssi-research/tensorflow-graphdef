/**
 * ****************************************************************************
 * (c) copyright 2023 Sony Semiconductor Israel, Ltd. All rights reserved.
 *
 *
 * This software, in source or object form (the "Software"), is the
 * property of Sony Semiconductor Israel Ltd. (the "Company") and/or its
 * licensors, which have all right, title and interest therein, You
 * may use the Software only in  accordance with the terms of written
 * license agreement between you and the Company (the "License").
 * Except as expressly stated in the License, the Company grants no
 * licenses by implication, estoppel, or otherwise. If you are not
 * aware of or do not agree to the License terms, you may not use,
 * copy or modify the Software. You may use the source code of the
 * Software only for your internal purposes and may not distribute the
 * source code of the Software, any part thereof, or any derivative work
 * thereof, to any third party, except pursuant to the Company's prior
 * written consent.
 * The Software is the confidential information of the Company.
 * ****************************************************************************
 */
syntax = "proto3";

package uni_model_proto;

import "graphdef/tensor_shape.proto";
import "graphdef/types.proto";

option cc_enable_arenas = true;
option java_outer_classname = "ResourceHandle";
option java_multiple_files = true;
option java_package = "graphdef";
option go_package = "github.com/tensorflow/tensorflow/tensorflow/go/core/framework/resource_handle_go_proto";

// Protocol buffer representing a handle to a tensorflow resource. Handles are
// not valid across executions, but can be serialized back and forth from within
// a single run.
message ResourceHandleProto {
  // Unique name for the device containing the resource.
  string device = 1;

  // Container in which this resource is placed.
  string container = 2;

  // Unique name of this resource.
  string name = 3;

  // Hash code for the type of the resource. Is only valid in the same device
  // and in the same execution.
  uint64 hash_code = 4;

  // For debug-only, the name of the type pointed to by this handle, if
  // available.
  string maybe_type_name = 5;

  // Protocol buffer representing a pair of (data type, tensor shape).
  message DtypeAndShape {
    DataType dtype = 1;
    TensorShapeProto shape = 2;
  }

  // Data types and shapes for the underlying resource.
  repeated DtypeAndShape dtypes_and_shapes = 6;

  reserved 7;
}