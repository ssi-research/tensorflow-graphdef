/**
 * ****************************************************************************
 * (c) copyright 2023 Sony Semiconductor Israel, Ltd. All rights reserved.
 *
 *
 * This software, in source or object form (the "Software"), is the
 * property of Sony Semiconductor Israel Ltd. (the "Company") and/or its
 * licensors, which have all right, title and interest therein, You
 * may use the Software only in  accordance with the terms of written
 * license agreement between you and the Company (the "License").
 * Except as expressly stated in the License, the Company grants no
 * licenses by implication, estoppel, or otherwise. If you are not
 * aware of or do not agree to the License terms, you may not use,
 * copy or modify the Software. You may use the source code of the
 * Software only for your internal purposes and may not distribute the
 * source code of the Software, any part thereof, or any derivative work
 * thereof, to any third party, except pursuant to the Company's prior
 * written consent.
 * The Software is the confidential information of the Company.
 * ****************************************************************************
 */
syntax = "proto3";

package uni_model_proto;

option cc_enable_arenas = true;
option java_outer_classname = "TypesProtos";
option java_multiple_files = true;
option java_package = "graphdef";
option go_package = "github.com/tensorflow/tensorflow/tensorflow/go/core/framework/types_go_proto";

// (== suppress_warning documentation-presence ==)
// LINT.IfChange
enum DataType {
  // Not a legal value for DataType.  Used to indicate a DataType field
  // has not been set.
  DT_INVALID = 0;

  // Data types that all computation devices are expected to be
  // capable to support.
  DT_FLOAT = 1;
  DT_DOUBLE = 2;
  DT_INT32 = 3;
  DT_UINT8 = 4;
  DT_INT16 = 5;
  DT_INT8 = 6;
  DT_STRING = 7;
  DT_COMPLEX64 = 8;  // Single-precision complex
  DT_INT64 = 9;
  DT_BOOL = 10;
  DT_QINT8 = 11;     // Quantized int8
  DT_QUINT8 = 12;    // Quantized uint8
  DT_QINT32 = 13;    // Quantized int32
  DT_BFLOAT16 = 14;  // Float32 truncated to 16 bits.  Only for cast ops.
  DT_QINT16 = 15;    // Quantized int16
  DT_QUINT16 = 16;   // Quantized uint16
  DT_UINT16 = 17;
  DT_COMPLEX128 = 18;  // Double-precision complex
  DT_HALF = 19;
  DT_RESOURCE = 20;
  DT_VARIANT = 21;  // Arbitrary C++ data types
  DT_UINT32 = 22;
  DT_UINT64 = 23;

  // Do not use!  These are only for parameters.  Every enum above
  // should have a corresponding value below (verified by types_test).
  DT_FLOAT_REF = 101;
  DT_DOUBLE_REF = 102;
  DT_INT32_REF = 103;
  DT_UINT8_REF = 104;
  DT_INT16_REF = 105;
  DT_INT8_REF = 106;
  DT_STRING_REF = 107;
  DT_COMPLEX64_REF = 108;
  DT_INT64_REF = 109;
  DT_BOOL_REF = 110;
  DT_QINT8_REF = 111;
  DT_QUINT8_REF = 112;
  DT_QINT32_REF = 113;
  DT_BFLOAT16_REF = 114;
  DT_QINT16_REF = 115;
  DT_QUINT16_REF = 116;
  DT_UINT16_REF = 117;
  DT_COMPLEX128_REF = 118;
  DT_HALF_REF = 119;
  DT_RESOURCE_REF = 120;
  DT_VARIANT_REF = 121;
  DT_UINT32_REF = 122;
  DT_UINT64_REF = 123;
}
// LINT.ThenChange(
//    https://www.tensorflow.org/code/tensorflow/c/tf_datatype.h,
//    https://www.tensorflow.org/code/tensorflow/go/tensor.go,
//    https://www.tensorflow.org/code/nnir_proto/tensor.cc,
//    https://www.tensorflow.org/code/nnir_proto/types.h,
//    https://www.tensorflow.org/code/nnir_proto/types.cc,
//    https://www.tensorflow.org/code/nnir_proto/dtypes.py,
//    https://www.tensorflow.org/code/nnir_proto/function.py)