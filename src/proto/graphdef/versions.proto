/**
 * ****************************************************************************
 * (c) copyright 2023 Sony Semiconductor Israel, Ltd. All rights reserved.
 *
 *
 * This software, in source or object form (the "Software"), is the
 * property of Sony Semiconductor Israel Ltd. (the "Company") and/or its
 * licensors, which have all right, title and interest therein, You
 * may use the Software only in  accordance with the terms of written
 * license agreement between you and the Company (the "License").
 * Except as expressly stated in the License, the Company grants no
 * licenses by implication, estoppel, or otherwise. If you are not
 * aware of or do not agree to the License terms, you may not use,
 * copy or modify the Software. You may use the source code of the
 * Software only for your internal purposes and may not distribute the
 * source code of the Software, any part thereof, or any derivative work
 * thereof, to any third party, except pursuant to the Company's prior
 * written consent.
 * The Software is the confidential information of the Company.
 * ****************************************************************************
 */
syntax = "proto3";

package uni_model_proto;

option cc_enable_arenas = true;
option java_outer_classname = "VersionsProtos";
option java_multiple_files = true;
option java_package = "graphdef";
option go_package = "github.com/tensorflow/tensorflow/tensorflow/go/core/framework/versions_go_proto";

// Version information for a piece of serialized data
//
// There are different types of versions for each type of data
// (GraphDef, etc.), but they all have the same common shape
// described here.
//
// Each consumer has "consumer" and "min_producer" versions (specified
// elsewhere).  A consumer is allowed to consume this data if
//
//   producer >= min_producer
//   consumer >= min_consumer
//   consumer not in bad_consumers
//
message VersionDef {
  // The version of the code that produced this data.
  int32 producer = 1;

  // Any consumer below this version is not allowed to consume this data.
  int32 min_consumer = 2;

  // Specific consumer versions which are disallowed (e.g. due to bugs).
  repeated int32 bad_consumers = 3;
}